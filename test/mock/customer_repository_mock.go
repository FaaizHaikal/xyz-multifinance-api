// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/customer.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/customer.go -destination=test/mock/customer_repository_mock.go -package=mock CustomerRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	domain "xyz-multifinance-api/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerRepository) Create(customer *domain.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerRepositoryMockRecorder) Create(customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerRepository)(nil).Create), customer)
}

// FindByID mocks base method.
func (m *MockCustomerRepository) FindByID(id string) (*domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCustomerRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCustomerRepository)(nil).FindByID), id)
}

// FindByNIK mocks base method.
func (m *MockCustomerRepository) FindByNIK(nik string) (*domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNIK", nik)
	ret0, _ := ret[0].(*domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNIK indicates an expected call of FindByNIK.
func (mr *MockCustomerRepositoryMockRecorder) FindByNIK(nik any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNIK", reflect.TypeOf((*MockCustomerRepository)(nil).FindByNIK), nik)
}
