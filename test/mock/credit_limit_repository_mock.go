// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/credit_limit.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/credit_limit.go -destination=test/mock/credit_limit_repository_mock.go -package=mock CreditLimitRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	domain "xyz-multifinance-api/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockCreditLimitRepository is a mock of CreditLimitRepository interface.
type MockCreditLimitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreditLimitRepositoryMockRecorder
	isgomock struct{}
}

// MockCreditLimitRepositoryMockRecorder is the mock recorder for MockCreditLimitRepository.
type MockCreditLimitRepositoryMockRecorder struct {
	mock *MockCreditLimitRepository
}

// NewMockCreditLimitRepository creates a new mock instance.
func NewMockCreditLimitRepository(ctrl *gomock.Controller) *MockCreditLimitRepository {
	mock := &MockCreditLimitRepository{ctrl: ctrl}
	mock.recorder = &MockCreditLimitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditLimitRepository) EXPECT() *MockCreditLimitRepositoryMockRecorder {
	return m.recorder
}

// CreateCreditLimit mocks base method.
func (m *MockCreditLimitRepository) CreateCreditLimit(creditLimit *domain.CreditLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditLimit", creditLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCreditLimit indicates an expected call of CreateCreditLimit.
func (mr *MockCreditLimitRepositoryMockRecorder) CreateCreditLimit(creditLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditLimit", reflect.TypeOf((*MockCreditLimitRepository)(nil).CreateCreditLimit), creditLimit)
}

// GetCreditLimitByCustomerAndTenor mocks base method.
func (m *MockCreditLimitRepository) GetCreditLimitByCustomerAndTenor(customerID string, tenorMonths int) (*domain.CreditLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditLimitByCustomerAndTenor", customerID, tenorMonths)
	ret0, _ := ret[0].(*domain.CreditLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditLimitByCustomerAndTenor indicates an expected call of GetCreditLimitByCustomerAndTenor.
func (mr *MockCreditLimitRepositoryMockRecorder) GetCreditLimitByCustomerAndTenor(customerID, tenorMonths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditLimitByCustomerAndTenor", reflect.TypeOf((*MockCreditLimitRepository)(nil).GetCreditLimitByCustomerAndTenor), customerID, tenorMonths)
}

// GetCreditLimitsByCustomerID mocks base method.
func (m *MockCreditLimitRepository) GetCreditLimitsByCustomerID(customerID string) ([]domain.CreditLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditLimitsByCustomerID", customerID)
	ret0, _ := ret[0].([]domain.CreditLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditLimitsByCustomerID indicates an expected call of GetCreditLimitsByCustomerID.
func (mr *MockCreditLimitRepositoryMockRecorder) GetCreditLimitsByCustomerID(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditLimitsByCustomerID", reflect.TypeOf((*MockCreditLimitRepository)(nil).GetCreditLimitsByCustomerID), customerID)
}

// UpdateCreditLimit mocks base method.
func (m *MockCreditLimitRepository) UpdateCreditLimit(creditLimit *domain.CreditLimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreditLimit", creditLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreditLimit indicates an expected call of UpdateCreditLimit.
func (mr *MockCreditLimitRepositoryMockRecorder) UpdateCreditLimit(creditLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreditLimit", reflect.TypeOf((*MockCreditLimitRepository)(nil).UpdateCreditLimit), creditLimit)
}
