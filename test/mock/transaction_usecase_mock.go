// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/transaction_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/transaction_usecase.go -destination=test/mock/transaction_usecase_mock.go -package=mock TransactionUseCase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "xyz-multifinance-api/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactionUseCase is a mock of TransactionUseCase interface.
type MockTransactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUseCaseMockRecorder
	isgomock struct{}
}

// MockTransactionUseCaseMockRecorder is the mock recorder for MockTransactionUseCase.
type MockTransactionUseCaseMockRecorder struct {
	mock *MockTransactionUseCase
}

// NewMockTransactionUseCase creates a new mock instance.
func NewMockTransactionUseCase(ctrl *gomock.Controller) *MockTransactionUseCase {
	mock := &MockTransactionUseCase{ctrl: ctrl}
	mock.recorder = &MockTransactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUseCase) EXPECT() *MockTransactionUseCaseMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionUseCase) CreateTransaction(req *model.CreateTransactionRequest) (*model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", req)
	ret0, _ := ret[0].(*model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionUseCaseMockRecorder) CreateTransaction(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionUseCase)(nil).CreateTransaction), req)
}

// GetTransactionByContractNumber mocks base method.
func (m *MockTransactionUseCase) GetTransactionByContractNumber(contractNumber string) (*model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByContractNumber", contractNumber)
	ret0, _ := ret[0].(*model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByContractNumber indicates an expected call of GetTransactionByContractNumber.
func (mr *MockTransactionUseCaseMockRecorder) GetTransactionByContractNumber(contractNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByContractNumber", reflect.TypeOf((*MockTransactionUseCase)(nil).GetTransactionByContractNumber), contractNumber)
}

// GetTransactionsByCustomerID mocks base method.
func (m *MockTransactionUseCase) GetTransactionsByCustomerID(customerID string) ([]model.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByCustomerID", customerID)
	ret0, _ := ret[0].([]model.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByCustomerID indicates an expected call of GetTransactionsByCustomerID.
func (mr *MockTransactionUseCaseMockRecorder) GetTransactionsByCustomerID(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByCustomerID", reflect.TypeOf((*MockTransactionUseCase)(nil).GetTransactionsByCustomerID), customerID)
}
