// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/auth_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/auth_usecase.go -destination=test/mock/auth_usecase_mock.go -package=mock AuthUseCase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "xyz-multifinance-api/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthUseCase is a mock of AuthUseCase interface.
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
	isgomock struct{}
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthUseCase.
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mock instance.
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUseCase) Login(req *model.LoginRequest) (*model.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", req)
	ret0, _ := ret[0].(*model.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthUseCaseMockRecorder) Login(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUseCase)(nil).Login), req)
}

// RefreshToken mocks base method.
func (m *MockAuthUseCase) RefreshToken(req *model.RefreshTokenRequest) (*model.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", req)
	ret0, _ := ret[0].(*model.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthUseCaseMockRecorder) RefreshToken(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthUseCase)(nil).RefreshToken), req)
}

// Register mocks base method.
func (m *MockAuthUseCase) Register(req *model.RegisterCustomerRequest) (*model.CustomerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", req)
	ret0, _ := ret[0].(*model.CustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthUseCaseMockRecorder) Register(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthUseCase)(nil).Register), req)
}
