// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/credit_limit_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/credit_limit_usecase.go -destination=test/mock/credit_limit_usecase_mock.go -package=mock CreditLimitUseCase
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "xyz-multifinance-api/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockCreditLimitUseCase is a mock of CreditLimitUseCase interface.
type MockCreditLimitUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreditLimitUseCaseMockRecorder
	isgomock struct{}
}

// MockCreditLimitUseCaseMockRecorder is the mock recorder for MockCreditLimitUseCase.
type MockCreditLimitUseCaseMockRecorder struct {
	mock *MockCreditLimitUseCase
}

// NewMockCreditLimitUseCase creates a new mock instance.
func NewMockCreditLimitUseCase(ctrl *gomock.Controller) *MockCreditLimitUseCase {
	mock := &MockCreditLimitUseCase{ctrl: ctrl}
	mock.recorder = &MockCreditLimitUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditLimitUseCase) EXPECT() *MockCreditLimitUseCaseMockRecorder {
	return m.recorder
}

// GetCustomerCreditLimitByTenor mocks base method.
func (m *MockCreditLimitUseCase) GetCustomerCreditLimitByTenor(customerID string, tenorMonths int) (*model.CreditLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCreditLimitByTenor", customerID, tenorMonths)
	ret0, _ := ret[0].(*model.CreditLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCreditLimitByTenor indicates an expected call of GetCustomerCreditLimitByTenor.
func (mr *MockCreditLimitUseCaseMockRecorder) GetCustomerCreditLimitByTenor(customerID, tenorMonths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCreditLimitByTenor", reflect.TypeOf((*MockCreditLimitUseCase)(nil).GetCustomerCreditLimitByTenor), customerID, tenorMonths)
}

// GetCustomerCreditLimits mocks base method.
func (m *MockCreditLimitUseCase) GetCustomerCreditLimits(customerID string) ([]model.CreditLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCreditLimits", customerID)
	ret0, _ := ret[0].([]model.CreditLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCreditLimits indicates an expected call of GetCustomerCreditLimits.
func (mr *MockCreditLimitUseCaseMockRecorder) GetCustomerCreditLimits(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCreditLimits", reflect.TypeOf((*MockCreditLimitUseCase)(nil).GetCustomerCreditLimits), customerID)
}

// SetCustomerCreditLimit mocks base method.
func (m *MockCreditLimitUseCase) SetCustomerCreditLimit(req *model.SetCreditLimitRequest) (*model.CreditLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomerCreditLimit", req)
	ret0, _ := ret[0].(*model.CreditLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCustomerCreditLimit indicates an expected call of SetCustomerCreditLimit.
func (mr *MockCreditLimitUseCaseMockRecorder) SetCustomerCreditLimit(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomerCreditLimit", reflect.TypeOf((*MockCreditLimitUseCase)(nil).SetCustomerCreditLimit), req)
}
