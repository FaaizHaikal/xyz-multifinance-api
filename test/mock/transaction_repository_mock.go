// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/transaction.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/transaction.go -destination=test/mock/transaction_repository_mock.go -package=mock TransactionRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	domain "xyz-multifinance-api/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepository) CreateTransaction(transaction *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CreateTransaction(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CreateTransaction), transaction)
}

// GetTransactionByContractNumber mocks base method.
func (m *MockTransactionRepository) GetTransactionByContractNumber(contractNumber string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByContractNumber", contractNumber)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByContractNumber indicates an expected call of GetTransactionByContractNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionByContractNumber(contractNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByContractNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionByContractNumber), contractNumber)
}

// GetTransactionsByCustomerID mocks base method.
func (m *MockTransactionRepository) GetTransactionsByCustomerID(customerID string) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByCustomerID", customerID)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByCustomerID indicates an expected call of GetTransactionsByCustomerID.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionsByCustomerID(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByCustomerID", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionsByCustomerID), customerID)
}
